from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import os
from PIL import Image
import pytesseract

# –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ tesseract.exe (–µ—Å–ª–∏ Windows)
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# –ë–∞–∑–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
INGREDIENTS_DB = {
    "–ø–∞—Ä–∞–±–µ–Ω—ã": "‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤—Ä–µ–¥–Ω—ã",
    "—Å—É–ª—å—Ñ–∞—Ç—ã": "‚ö†Ô∏è –ú–æ–≥—É—Ç —Ä–∞–∑–¥—Ä–∞–∂–∞—Ç—å –∫–æ–∂—É",
    "—Ñ—Ç–∞–ª–∞—Ç—ã": "‚ö†Ô∏è –ù–∞—Ä—É—à–∞—é—Ç –≥–æ—Ä–º–æ–Ω—ã",
    "–≤–æ–¥–∞": "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç",
    "—Å–∞—Ö–∞—Ä": "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π (–≤ –µ–¥–µ)",
    "–ª–∏–º–æ–Ω–Ω–∞—è –∫–∏—Å–ª–æ—Ç–∞": "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç"
}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ToxScan.\n"
        "üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /check –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é."
    )

# –ö–æ–º–∞–Ω–¥–∞ /check
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/check –≤–æ–¥–∞, —Å–∞—Ö–∞—Ä")
        return

    composition = " ".join(context.args).lower().split(", ")
    result = "üß™ –ê–Ω–∞–ª–∏–∑:\n"
    for ing in composition:
        info = INGREDIENTS_DB.get(ing.strip(), "‚ÑπÔ∏è –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        result += f"- {ing.strip()}: {info}\n"

    await update.message.reply_text(result)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/check ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä—É—á–Ω—É—é\n"
        "/scan ‚Äî –§–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞\n"
        "/privacy ‚Äî –ü–æ–ª–∏—Ç–∏–∫–∞\n"
        "/list ‚Äî –¢–æ–ø –≤—Ä–µ–¥–Ω—ã—Ö"
    )

# –ö–æ–º–∞–Ω–¥–∞ /privacy
async def privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîí –ü–æ–ª–∏—Ç–∏–∫–∞: https://docs.google.com/...")

# –ö–æ–º–∞–Ω–¥–∞ /list
async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ö†Ô∏è –¢–æ–ø –≤—Ä–µ–¥–Ω—ã—Ö:\n–ü–∞—Ä–∞–±–µ–Ω—ã, –°—É–ª—å—Ñ–∞—Ç—ã, –§—Ç–∞–ª–∞—Ç—ã")

# –ö–æ–º–∞–Ω–¥–∞ /scan
async def scan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, —è –Ω–∞—á–Ω—É –∞–Ω–∞–ª–∏–∑.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_chat_action("typing")
    try:
        photo_file = await update.message.photo[-1].get_file()
        photo_path = f"photo_{update.message.from_user.id}.jpg"
        await photo_file.download_to_drive(photo_path)

        print("‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ")
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –†–∞—Å–ø–æ–∑–Ω–∞—é...")

        image = Image.open(photo_path)
        text = pytesseract.image_to_string(image, lang='rus+eng').lower()
        ingredients = [i.strip() for i in text.replace("\n", ", ").split(",")]

        result = "üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        for ing in ingredients:
            if ing:
                info = INGREDIENTS_DB.get(ing, "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
                result += f"- {ing}: {info}\n"

        await update.message.reply_text(result)
        os.remove(photo_path)

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token("***REMOVED***").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("check", check))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("privacy", privacy))
    app.add_handler(CommandHandler("list", list_command))
    app.add_handler(CommandHandler("scan", scan))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()