from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler,
)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import os
from PIL import Image
import pytesseract
import sqlite3

# –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ tesseract.exe (–µ—Å–ª–∏ Windows)
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# –¢–≤–æ–π Telegram ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
YOUR_TELEGRAM_ID = "6008650347"

# –°—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é)
DONATE_LINK = "https://example.com/donate"  # –ù–∞–ø—Ä–∏–º–µ—Ä, Boosty

# Email –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
SUPPORT_EMAIL = "toxscanbot@gmail.com"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    lang = context.user_data.get("lang")
    if not lang:
        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
        user_lang = update.message.from_user.language_code
        lang = "ru" if user_lang and user_lang.startswith("ru") else "en"
        context.user_data["lang"] = lang
        print(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω —è–∑—ã–∫: {lang} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}")  # –û—Ç–ª–∞–¥–∫–∞
    return lang

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–µ –∏–∑ –±–∞–∑—ã
def get_ingredient_info(name: str, lang: str = "ru") -> tuple:
    conn = sqlite3.connect("toxscan.db")
    cursor = conn.cursor()
    cursor.execute("SELECT info, category FROM ingredients WHERE name = ? AND lang = ?", (name.lower(), lang))
    result = cursor.fetchone()
    conn.close()
    if result:
        info, category = result
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É
        if category == "safe":
            return f"üü¢ {info}", category
        elif category == "warning":
            return f"‚ö†Ô∏è {info}", category
        elif category == "danger":
            return f"üî¥ {info}", category
    return "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö." if lang == "ru" else "‚ÑπÔ∏è No data.", "unknown"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_user_language(update, context)
    print(f"–ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}, —è–∑—ã–∫: {lang}")  # –û—Ç–ª–∞–¥–∫–∞
    if lang == "ru":
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ToxScan ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Å–∫–∞–Ω–µ—Ä —Å–æ—Å—Ç–∞–≤–æ–≤ –µ–¥—ã –∏ –∫–æ—Å–º–µ—Ç–∏–∫–∏ üß¥üç´\n\n"
            "üì¶ –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é:\n"
            "- üçî –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è\n"
            "- üíÑ –ö–æ—Å–º–µ—Ç–∏–∫—É\n\n"
            "üîç –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
            "- –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤\n"
            "- –Ø –ø—Ä–æ–≤–µ—Ä—é –∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:\n"
            "  üü¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ\n"
            "  ‚ö†Ô∏è –°–ø–æ—Ä–Ω–æ\n"
            "  üî¥ –û–ø–∞—Å–Ω–æ—Å—Ç—å\n"
            "- –ü–æ–ª—É—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "- –•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ!\n\n"
            f"üî• –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ (/lang) –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç (/donate)!\n"
            f"üì¨ –°–≤—è–∑—å: {SUPPORT_EMAIL}"
        )
    else:
        await update.message.reply_text(
            "üëã Hello! I'm ToxScan ‚Äî your personal scanner for food and cosmetics üß¥üç´\n\n"
            "üì¶ I analyze:\n"
            "- üçî Food products\n"
            "- üíÑ Cosmetics\n\n"
            "üîç How it works:\n"
            "- Send a photo of the label or type a list of ingredients\n"
            "- I check their safety:\n"
            "  üü¢ Safe\n"
            "  ‚ö†Ô∏è Questionable\n"
            "  üî¥ Dangerous\n"
            "- Get recommendations\n"
            "- Want to leave feedback? Just write it!\n\n"
            f"üî• Send a photo or text, choose language (/lang), or support the project (/donate)!\n"
            f"üì¨ Contact: {SUPPORT_EMAIL}"
        )

# –ö–æ–º–∞–Ω–¥–∞ /lang —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
async def lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"–ö–æ–º–∞–Ω–¥–∞ /lang –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}")  # –û—Ç–ª–∞–¥–∫–∞
    keyboard = [
        [
            InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="ru"),
            InlineKeyboardButton("English", callback_data="en"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    new_lang = query.data
    context.user_data["lang"] = new_lang
    print(f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_lang} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")  # –û—Ç–ª–∞–¥–∫–∞
    await query.edit_message_text(
        "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π" if new_lang == "ru" else "Language set: English"
    )

# –ö–æ–º–∞–Ω–¥–∞ /list
async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_user_language(update, context)
    print(f"–ö–æ–º–∞–Ω–¥–∞ /list –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}, —è–∑—ã–∫: {lang}")  # –û—Ç–ª–∞–¥–∫–∞
    if lang == "ru":
        await update.message.reply_text("üî¥ –¢–æ–ø –≤—Ä–µ–¥–Ω—ã—Ö:\n–§—Ç–∞–ª–∞—Ç—ã\n‚ö†Ô∏è –°–ø–æ—Ä–Ω—ã–µ:\n–ü–∞—Ä–∞–±–µ–Ω—ã, –°—É–ª—å—Ñ–∞—Ç—ã")
    else:
        await update.message.reply_text("üî¥ Top harmful:\nPhthalates\n‚ö†Ô∏è Questionable:\nParabens, Sulfates")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_user_language(update, context)
    print(f"–ö–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}, —è–∑—ã–∫: {lang}")  # –û—Ç–ª–∞–¥–∫–∞
    if lang == "ru":
        await update.message.reply_text(
            "/start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/lang ‚Äî –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫\n"
            "/list ‚Äî –¢–æ–ø –≤—Ä–µ–¥–Ω—ã—Ö\n"
            "/help ‚Äî –ü–æ–º–æ—â—å –∏ –≤–æ–ø—Ä–æ—Å—ã\n"
            "/donate ‚Äî –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
            "/feedback ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ!)\n"
            "/privacy ‚Äî –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
        )
    else:
        await update.message.reply_text(
            "/start ‚Äî Start the bot\n"
            "/lang ‚Äî Choose language\n"
            "/list ‚Äî Top harmful ingredients\n"
            "/help ‚Äî Help and FAQ\n"
            "/donate ‚Äî Support the project\n"
            "/feedback ‚Äî Send feedback (or just write it!)\n"
            "/privacy ‚Äî Privacy policy"
        )

# –ö–æ–º–∞–Ω–¥–∞ /privacy
async def privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_user_language(update, context)
    print(f"–ö–æ–º–∞–Ω–¥–∞ /privacy –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}, —è–∑—ã–∫: {lang}")  # –û—Ç–ª–∞–¥–∫–∞
    await update.message.reply_text(
        f"üîí –ü–æ–ª–∏—Ç–∏–∫–∞: https://docs.google.com/document/d/1w2TC2fk-YkPErK1E_VJMZSK6FHb575bxfL3tIZeQql8/edit?usp=sharing\n"
        f"üì¨ –°–≤—è–∑—å: {SUPPORT_EMAIL}"
        if lang == "ru"
        else f"üîí Policy: https://docs.google.com/document/d/1w2TC2fk-YkPErK1E_VJMZSK6FHb575bxfL3tIZeQql8/edit?usp=sharing\n"
             f"üì¨ Contact: {SUPPORT_EMAIL}"
    )

# –ö–æ–º–∞–Ω–¥–∞ /feedback (–¥–ª—è —è–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞)
async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_user_language(update, context)
    print(f"–ö–æ–º–∞–Ω–¥–∞ /feedback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}, —è–∑—ã–∫: {lang}")  # –û—Ç–ª–∞–¥–∫–∞
    if not context.args:
        await update.message.reply_text(
            f"–ù–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/feedback –û—Ç–ª–∏—á–Ω—ã–π –±–æ—Ç!\n"
            f"–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã!\nüì¨ –ò–ª–∏ –ø–∏—à–∏ –Ω–∞ {SUPPORT_EMAIL}"
            if lang == "ru"
            else f"Write feedback or a suggestion after the command, e.g.:\n/feedback Great bot!\n"
                 f"Or just send the text without the command!\nüì¨ Or contact {SUPPORT_EMAIL}"
        )
        return

    feedback_text = " ".join(context.args)
    user_id = update.message.from_user.id
    username = update.message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    try:
        await context.bot.send_message(
            chat_id=YOUR_TELEGRAM_ID,
            text=f"üì¨ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{username} (ID: {user_id}):\n{feedback_text}"
        )
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É üòä\nüì¨ –°–≤—è–∑—å: {SUPPORT_EMAIL}"
            if lang == "ru"
            else f"Thanks for the feedback! It has been sent to the developer üòä\nüì¨ Contact: {SUPPORT_EMAIL}"
        )
    except Exception as e:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞: {e}\nüì¨ –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ {SUPPORT_EMAIL}"
            if lang == "ru"
            else f"Error sending feedback: {e}\nüì¨ Try contacting {SUPPORT_EMAIL}"
        )

# –ö–æ–º–∞–Ω–¥–∞ /donate
async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_user_language(update, context)
    print(f"–ö–æ–º–∞–Ω–¥–∞ /donate –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}, —è–∑—ã–∫: {lang}")  # –û—Ç–ª–∞–¥–∫–∞
    await update.message.reply_text(
        f"üíñ –ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç!\n–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –¥–æ–Ω–∞—Ç–∞: {DONATE_LINK}\n"
        f"üì¨ –°–≤—è–∑—å: {SUPPORT_EMAIL}"
        if lang == "ru"
        else f"üíñ Support the project!\nFollow the link to donate: {DONATE_LINK}\n"
             f"üì¨ Contact: {SUPPORT_EMAIL}"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–Ω–∞–ª–∏–∑ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –æ—Ç–∑—ã–≤–æ–≤)
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_user_language(update, context)
    print(f"–¢–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}, —è–∑—ã–∫: {lang}, —Ç–µ–∫—Å—Ç: {update.message.text}")  # –û—Ç–ª–∞–¥–∫–∞
    text = update.message.text.strip()
    if text.startswith("/"):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–æ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (—Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—è—Ç—É—é)
    if "," in text or " " in text.split()[-1]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—è—Ç–∞—è –∏–ª–∏ —ç—Ç–æ –Ω–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ
        composition = text.lower().split(", ")
        result = "üß™ –ê–Ω–∞–ª–∏–∑:\n" if lang == "ru" else "üß™ Analysis:\n"
        for ing in composition:
            ing = ing.strip()
            if ing:
                info, _ = get_ingredient_info(ing, lang)
                result += f"- {ing}: {info}\n"
        await update.message.reply_text(result)
    else:
        # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–æ–º
        user_id = update.message.from_user.id
        username = update.message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
        try:
            await context.bot.send_message(
                chat_id=YOUR_TELEGRAM_ID,
                text=f"üì¨ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{username} (ID: {user_id}):\n{text}"
            )
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É üòä\nüì¨ –°–≤—è–∑—å: {SUPPORT_EMAIL}"
                if lang == "ru"
                else f"Thanks for the feedback! It has been sent to the developer üòä\nüì¨ Contact: {SUPPORT_EMAIL}"
            )
        except Exception as e:
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞: {e}\nüì¨ –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ {SUPPORT_EMAIL}"
                if lang == "ru"
                else f"Error sending feedback: {e}\nüì¨ Try contacting {SUPPORT_EMAIL}"
            )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = get_user_language(update, context)
    print(f"–§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}, —è–∑—ã–∫: {lang}")  # –û—Ç–ª–∞–¥–∫–∞
    await update.message.reply_chat_action("typing")
    try:
        photo_file = await update.message.photo[-1].get_file()
        photo_path = f"photo_{update.message.from_user.id}.jpg"
        await photo_file.download_to_drive(photo_path)

        print("‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ")
        await update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –†–∞—Å–ø–æ–∑–Ω–∞—é..." if lang == "ru"
            else "‚úÖ Photo received! Analyzing..."
        )

        image = Image.open(photo_path)
        text = pytesseract.image_to_string(image, lang='rus+eng').lower()
        ingredients = [i.strip() for i in text.replace("\n", ", ").split(",")]

        result = "üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n" if lang == "ru" else "üß™ Results:\n"
        for ing in ingredients:
            if ing:
                info, _ = get_ingredient_info(ing, lang)
                result += f"- {ing}: {info}\n"

        await update.message.reply_text(result)
        os.remove(photo_path)

    except Exception as e:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞: {e}\nüì¨ –°–≤—è–∑—å: {SUPPORT_EMAIL}"
            if lang == "ru"
            else f"Error: {e}\nüì¨ Contact: {SUPPORT_EMAIL}"
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    try:
        app = ApplicationBuilder().token("***REMOVED***").build()
        print("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")  # –û—Ç–ª–∞–¥–∫–∞

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("lang", lang))
        app.add_handler(CallbackQueryHandler(set_language, pattern="^(ru|en)$"))
        app.add_handler(CommandHandler("list", list_command))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("donate", donate))
        app.add_handler(CommandHandler("feedback", feedback))
        app.add_handler(CommandHandler("privacy", privacy))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        app.run_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")  # –û—Ç–ª–∞–¥–∫–∞

if __name__ == "__main__":
    main()